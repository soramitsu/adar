"use strict";(self.webpackChunkadar=self.webpackChunkadar||[]).push([[9761],{79761:function(e,t,s){s.r(t),s.d(t,{default:function(){return b}});var r=s(23166),a=s(97582),i=s(37981),n=s(69826),d=s(4055),o=s(86424),l=s(89445),c=s(66419),w=s(64471),h=s(68282),g=s(69781),v=s(49053),u=s(50961),m=s(95439);let R=class extends((0,l.Wr)(c.Z,o.tA.FormattedAmountMixin,w.Z,o.tA.TransactionMixin,o.tA.NotificationMixin)){constructor(...e){super(...e),(0,r.Z)(this,"feeFetching",void 0),(0,r.Z)(this,"rewardsFetching",void 0),(0,r.Z)(this,"rewardsClaiming",void 0),(0,r.Z)(this,"transactionError",void 0),(0,r.Z)(this,"transactionStep",void 0),(0,r.Z)(this,"receivedRewards",void 0),(0,r.Z)(this,"fee",void 0),(0,r.Z)(this,"vestedRewards",void 0),(0,r.Z)(this,"crowdloanRewards",void 0),(0,r.Z)(this,"internalRewards",void 0),(0,r.Z)(this,"externalRewards",void 0),(0,r.Z)(this,"selectedVestedRewards",void 0),(0,r.Z)(this,"selectedInternalRewards",void 0),(0,r.Z)(this,"selectedExternalRewards",void 0),(0,r.Z)(this,"selectedCrowdloanRewards",void 0),(0,r.Z)(this,"xor",void 0),(0,r.Z)(this,"externalRewardsAvailable",void 0),(0,r.Z)(this,"rewardsAvailable",void 0),(0,r.Z)(this,"internalRewardsAvailable",void 0),(0,r.Z)(this,"vestedRewardsAvailable",void 0),(0,r.Z)(this,"rewardsByAssetsList",void 0),(0,r.Z)(this,"externalRewardsSelected",void 0),(0,r.Z)(this,"libraryTheme",void 0),(0,r.Z)(this,"reset",void 0),(0,r.Z)(this,"setSelectedRewards",void 0),(0,r.Z)(this,"getExternalRewards",void 0),(0,r.Z)(this,"claimRewards",void 0),(0,r.Z)(this,"subscribeOnRewards",void 0),(0,r.Z)(this,"unsubscribeFromRewards",void 0)}checkRewardsAfterAccountChange(){this.checkExternalRewards()}async created(){this.setStartSubscriptions([this.subscribeOnRewards]),this.setResetSubscriptions([this.unsubscribeFromRewards])}mounted(){this.withApi((async()=>{await this.checkExternalRewards()}))}beforeDestroy(){this.disconnectExternalNetwork()}destroyed(){this.reset()}get transactionStepsCount(){return this.externalRewardsSelected?2:1}get rewardsReceived(){return 0!==this.receivedRewards.length}get rewardsAmountHeaderItems(){return this.rewardsReceived?this.receivedRewards:this.rewardsByAssetsList}get rewardTokens(){return this.rewardsAmountHeaderItems.map((e=>e.asset))}get rewardTokenSymbols(){return this.rewardTokens.map((e=>e.symbol))}get gradientSymbol(){return 1===this.rewardTokenSymbols.length?this.rewardTokenSymbols[0]:""}get externalRewardsGroupItems(){return[{type:[d.RewardType.External,this.t("rewards.groups.external")],limit:(0,o.fG)(this.externalRewards),rewards:this.externalRewards}]}get vestedRewadsGroupItems(){const e=this.vestedRewards?.rewards??[],t=n.KnownAssets.get(n.KnownSymbols.PSWAP);return[{type:[d.RewardType.Strategic,this.t("rewards.groups.strategic")],title:this.t("rewards.claimableAmountDoneVesting"),limit:[{amount:i.FPNumber.fromCodecValue(this.vestedRewards?.limit??0,t.decimals).toCodecString(),asset:t}],total:{amount:i.FPNumber.fromCodecValue(this.vestedRewards?.total??0,t.decimals).toLocaleString(),asset:t},rewards:e}]}get crowdloanRewardsGroupItems(){return Object.entries(this.crowdloanRewards).map((([e,t])=>({type:[d.RewardType.Crowdloan,e],title:e,limit:t.map((e=>({...e,total:{amount:i.FPNumber.fromCodecValue(e.total??0,e.asset.decimals).toLocaleString(),asset:e.asset}})))})))}get selectedInternalRewardsModel(){return this.internalRewardsAvailable&&null!==this.selectedInternalRewards}set selectedInternalRewardsModel(e){const t=e?this.internalRewards:null;this.setSelectedRewards({selectedInternal:t})}get selectedExternalRewardsModel(){return 0!==this.selectedExternalRewards.length}set selectedExternalRewardsModel(e){const t=e?this.externalRewards:[];this.setSelectedRewards({selectedExternal:t})}get selectedVestedRewardsModel(){return this.vestedRewardsAvailable&&null!==this.selectedVestedRewards}set selectedVestedRewardsModel(e){const t=e?this.vestedRewards:null;this.setSelectedRewards({selectedVested:t})}get selectedCrowdloanRewardsModel(){return Object.keys(this.selectedCrowdloanRewards)}set selectedCrowdloanRewardsModel(e){const t=e.reduce(((e,t)=>(e[t]=this.crowdloanRewards[t],e)),{});this.setSelectedRewards({selectedCrowdloan:t})}get isInsufficientBalance(){return(0,u.LG)(this.xor,this.fee)}get feeInfo(){return{label:this.t("networkFeeText"),labelTooltip:this.t("networkFeeTooltipText"),value:this.formatCodecNumber(this.fee),assetSymbol:n.KnownSymbols.XOR}}get claimingInProgressOrFinished(){return this.rewardsClaiming||this.transactionError||this.rewardsReceived}get claimingStatusMessage(){return this.rewardsReceived?this.t("rewards.claiming.success"):this.t("rewards.claiming.pending")}get transactionStatusMessage(){if(this.rewardsReceived)return this.t("rewards.transactions.success");const e=this.tOrdinal(this.transactionStep),t=this.transactionError?"rewards.transactions.failed":"rewards.transactions.confimation";return this.t(t,{order:e,total:this.transactionStepsCount})}get hintText(){if(!this.isLoggedIn)return this.t("rewards.hint.connectAccounts");if(this.rewardsAvailable){const e=this.rewardTokenSymbols.join(` ${this.t("rewards.andText")} `),t=this.tc("transactionText",this.transactionStepsCount),s=this.transactionStepsCount>1?this.transactionStepsCount:"",r=this.transactionStepsCount>1?this.t("rewards.signing.accounts"):this.t("rewards.signing.extension");return this.t("rewards.hint.howToClaimRewards",{symbols:e,transactions:t,count:s,destination:r})}return""}get externalRewardsHintText(){return this.evmAddress?this.externalRewardsAvailable?"":this.t("rewards.hint.connectAnotherAccount"):this.t("rewards.hint.connectExternalAccount")}get actionButtonText(){return this.actionButtonLoading?"":this.isLoggedIn?this.transactionError?this.t("retryText"):this.isInsufficientBalance?this.t("insufficientBalanceText",{tokenSymbol:n.KnownSymbols.XOR}):this.rewardsClaiming?this.externalRewardsAvailable&&1===this.transactionStep?this.t("rewards.action.pendingExternal"):this.externalRewardsAvailable&&2!==this.transactionStep?"":this.t("rewards.action.pendingInternal"):this.t("rewards.action.signAndClaim"):this.t("connectWalletText")}get actionButtonLoading(){return this.rewardsFetching||this.feeFetching}get actionButtonDisabled(){return this.rewardsClaiming||this.isLoggedIn&&(!this.rewardsAvailable||this.isInsufficientBalance)}get changeWalletEvm(){return!!this.evmProvider}async handleAction(){return this.isLoggedIn?this.rewardsAvailable?await this.claimRewardsProcess():void 0:this.connectSoraWallet()}async checkExternalRewards(e=!1){this.isLoggedIn&&await this.getRewardsProcess(e)}async getRewardsProcess(e=!1){await this.getExternalRewards(this.evmAddress),!this.rewardsAvailable&&e&&this.showAppNotification(this.t("rewards.notification.empty"))}async claimRewardsProcess(){const e=this.soraAddress,t=this.evmAddress;if(e){if(t&&this.externalRewardsSelected){if(!await m.ZP.checkAccountIsConnected(t))return}await this.withNotifications((async()=>{await this.claimRewards({internalAddress:e,externalAddress:t})}))}}};(0,a.gn)([v.SB.rewards.feeFetching],R.prototype,"feeFetching",void 0),(0,a.gn)([v.SB.rewards.rewardsFetching],R.prototype,"rewardsFetching",void 0),(0,a.gn)([v.SB.rewards.rewardsClaiming],R.prototype,"rewardsClaiming",void 0),(0,a.gn)([v.SB.rewards.transactionError],R.prototype,"transactionError",void 0),(0,a.gn)([v.SB.rewards.transactionStep],R.prototype,"transactionStep",void 0),(0,a.gn)([v.SB.rewards.receivedRewards],R.prototype,"receivedRewards",void 0),(0,a.gn)([v.SB.rewards.fee],R.prototype,"fee",void 0),(0,a.gn)([v.SB.rewards.vestedRewards],R.prototype,"vestedRewards",void 0),(0,a.gn)([v.SB.rewards.crowdloanRewards],R.prototype,"crowdloanRewards",void 0),(0,a.gn)([v.SB.rewards.internalRewards],R.prototype,"internalRewards",void 0),(0,a.gn)([v.SB.rewards.externalRewards],R.prototype,"externalRewards",void 0),(0,a.gn)([v.SB.rewards.selectedVested],R.prototype,"selectedVestedRewards",void 0),(0,a.gn)([v.SB.rewards.selectedInternal],R.prototype,"selectedInternalRewards",void 0),(0,a.gn)([v.SB.rewards.selectedExternal],R.prototype,"selectedExternalRewards",void 0),(0,a.gn)([v.SB.rewards.selectedCrowdloan],R.prototype,"selectedCrowdloanRewards",void 0),(0,a.gn)([v.Yn.assets.xor],R.prototype,"xor",void 0),(0,a.gn)([v.Yn.rewards.externalRewardsAvailable],R.prototype,"externalRewardsAvailable",void 0),(0,a.gn)([v.Yn.rewards.rewardsAvailable],R.prototype,"rewardsAvailable",void 0),(0,a.gn)([v.Yn.rewards.internalRewardsAvailable],R.prototype,"internalRewardsAvailable",void 0),(0,a.gn)([v.Yn.rewards.vestedRewardsAvailable],R.prototype,"vestedRewardsAvailable",void 0),(0,a.gn)([v.Yn.rewards.rewardsByAssetsList],R.prototype,"rewardsByAssetsList",void 0),(0,a.gn)([v.Yn.rewards.externalRewardsSelected],R.prototype,"externalRewardsSelected",void 0),(0,a.gn)([v.Yn.libraryTheme],R.prototype,"libraryTheme",void 0),(0,a.gn)([v.QF.rewards.reset],R.prototype,"reset",void 0),(0,a.gn)([v.aD.rewards.setSelectedRewards],R.prototype,"setSelectedRewards",void 0),(0,a.gn)([v.aD.rewards.getExternalRewards],R.prototype,"getExternalRewards",void 0),(0,a.gn)([v.aD.rewards.claimRewards],R.prototype,"claimRewards",void 0),(0,a.gn)([v.aD.rewards.subscribeOnRewards],R.prototype,"subscribeOnRewards",void 0),(0,a.gn)([v.aD.rewards.unsubscribeFromRewards],R.prototype,"unsubscribeFromRewards",void 0),(0,a.gn)([(0,l.RL)("evmAddress")],R.prototype,"checkRewardsAfterAccountChange",null),R=(0,a.gn)([(0,l.wA)({components:{RewardsGradientBox:(0,g.kF)(h.z8.RewardsGradientBox),RewardsAmountHeader:(0,g.kF)(h.z8.RewardsAmountHeader),RewardsAmountTable:(0,g.kF)(h.z8.RewardsAmountTable),GenericPageHeader:(0,g.kF)(h.z8.GenericPageHeader),TokensRow:(0,g.kF)(h.z8.TokensRow),SelectProviderDialog:(0,g.kF)(h.z8.SelectProviderDialog),InfoLine:o.wx.InfoLine,FormattedAddress:o.wx.FormattedAddress}})],R);var p=R,b=(0,s(1001).Z)(p,(function(){var e=this,t=e._self._c;e._self._setupProxy;return t("div",{staticClass:"rewards"},[t("div",{directives:[{name:"loading",rawName:"v-loading",value:e.parentLoading||e.loading,expression:"parentLoading || loading"}],staticClass:"rewards-content"},[t("rewards-gradient-box",{staticClass:"rewards-block",attrs:{symbol:e.gradientSymbol}},[t("div",{class:["rewards-box",e.libraryTheme]},[t("tokens-row",{attrs:{assets:e.rewardTokens}}),e.claimingInProgressOrFinished?t("div",{staticClass:"rewards-claiming-text"},[e._v(" "+e._s(e.claimingStatusMessage)+" ")]):e._e(),e.isLoggedIn?t("div",{staticClass:"rewards-amount"},[t("rewards-amount-header",{attrs:{items:e.rewardsAmountHeaderItems}}),e.claimingInProgressOrFinished?e._e():[e.internalRewards?t("rewards-amount-table",{staticClass:"rewards-table",attrs:{title:e.t("rewards.events.LiquidityProvision"),items:[e.internalRewards],theme:e.libraryTheme,"is-codec-string":""},model:{value:e.selectedInternalRewardsModel,callback:function(t){e.selectedInternalRewardsModel=t},expression:"selectedInternalRewardsModel"}}):e._e(),t("rewards-amount-table",{staticClass:"rewards-table",attrs:{title:e.t("rewards.groups.strategic"),items:e.vestedRewadsGroupItems,theme:e.libraryTheme,"is-codec-string":""},model:{value:e.selectedVestedRewardsModel,callback:function(t){e.selectedVestedRewardsModel=t},expression:"selectedVestedRewardsModel"}}),Object.keys(e.crowdloanRewards).length?t("rewards-amount-table",{staticClass:"rewards-table",attrs:{title:e.t("rewards.groups.crowdloan"),items:e.crowdloanRewardsGroupItems,theme:e.libraryTheme,"is-codec-string":""},model:{value:e.selectedCrowdloanRewardsModel,callback:function(t){e.selectedCrowdloanRewardsModel=t},expression:"selectedCrowdloanRewardsModel"}}):e._e(),t("rewards-amount-table",{staticClass:"rewards-table",attrs:{title:e.t("rewards.groups.external"),items:e.externalRewardsGroupItems,"show-table":!!e.externalRewards.length,theme:e.libraryTheme,"simple-group":""},model:{value:e.selectedExternalRewardsModel,callback:function(t){e.selectedExternalRewardsModel=t},expression:"selectedExternalRewardsModel"}},[t("div",{staticClass:"rewards-footer"},[t("s-divider"),e.evmAddress?t("div",{staticClass:"rewards-account"},[t("div",{staticClass:"rewards-account-group"},[e.evmProvider?t("img",{staticClass:"rewards-account-logo",attrs:{src:e.getEvmProviderIcon(e.evmProvider),alt:e.evmProvider}}):e._e(),t("formatted-address",{attrs:{value:e.evmAddress,symbols:8}})],1),t("div",{staticClass:"rewards-account-group"},[e.changeWalletEvm?t("span",{directives:[{name:"button",rawName:"v-button"}],staticClass:"rewards-account-btn",on:{click:e.connectEvmWallet}},[e._v(" "+e._s(e.t("changeAccountText"))+" ")]):t("span",[e._v(e._s(e.t("connectedText")))]),e.changeWalletEvm?t("span",{staticClass:"rewards-account-btn disconnect",on:{click:e.resetEvmProviderConnection}},[e._v(" "+e._s(e.t("disconnectWalletText"))+" ")]):e._e()])]):t("s-button",{staticClass:"rewards-connect-button",attrs:{type:"tertiary"},on:{click:e.connectEvmWallet}},[e._v(" "+e._s(e.t("rewards.action.connectExternalWallet"))+" ")]),e.externalRewardsHintText?t("div",{staticClass:"rewards-footer-hint"},[e._v(e._s(e.externalRewardsHintText))]):e._e()],1)]),e.fee&&e.isLoggedIn&&e.rewardsAvailable&&!e.claimingInProgressOrFinished?t("info-line",e._b({class:["rewards-fee",e.libraryTheme],attrs:{"fiat-value":e.getFiatAmountByCodecString(e.fee),"is-formatted":""}},"info-line",e.feeInfo,!1)):e._e()]],2):e._e(),e.claimingInProgressOrFinished?t("div",{staticClass:"rewards-claiming-text--transaction"},[e._v(" "+e._s(e.transactionStatusMessage)+" ")]):e._e()],1)]),!e.claimingInProgressOrFinished&&e.hintText?t("div",{staticClass:"rewards-block rewards-hint"},[e._v(" "+e._s(e.hintText)+" ")]):e._e(),e.rewardsReceived||e.loading?e._e():t("s-button",{staticClass:"rewards-block rewards-action-button s-typography-button--large",attrs:{"data-test-name":"LoginAndGet",type:"primary",loading:e.actionButtonLoading,disabled:e.actionButtonDisabled},on:{click:e.handleAction}},[e._v(" "+e._s(e.actionButtonText)+" ")])],1),t("select-provider-dialog")],1)}),[],!1,null,"57479c12",null).exports}}]);