"use strict";(self.webpackChunkadar=self.webpackChunkadar||[]).push([[4904],{54904:function(t,e,i){i.r(e),i.d(e,{default:function(){return b}});var o=i(23166),s=i(97582),r=i(86424),n=i(25387),a=i.n(n),d=i(89445),p=i(66419),c=i(64471),g=i(49053);let u=class extends((0,d.Wr)(r.tA.LoadingMixin,c.Z,p.Z)){constructor(...t){super(...t),(0,o.Z)(this,"getSupportedApps",void 0),(0,o.Z)(this,"restoreSelectedNetwork",void 0),(0,o.Z)(this,"updateExternalBalance",void 0),(0,o.Z)(this,"subscribeOnBlockUpdates",void 0),(0,o.Z)(this,"updateOutgoingMaxLimit",void 0),(0,o.Z)(this,"resetBridgeForm",void 0),(0,o.Z)(this,"resetBlockUpdatesSubscription",void 0),(0,o.Z)(this,"resetOutgoingMaxLimitSubscription",void 0),(0,o.Z)(this,"selectedNetwork",void 0),(0,o.Z)(this,"externalAccount",void 0),(0,o.Z)(this,"subAccount",void 0),(0,o.Z)(this,"subBridgeConnector",void 0),(0,o.Z)(this,"isSignTxDialogVisible",void 0),(0,o.Z)(this,"setSignTxDialogVisibility",void 0),(0,o.Z)(this,"trackLogin",!1)}get chainApi(){return this.subBridgeConnector.accountApi}onSelectedNetworkChange(t,e){t&&e&&!a()(t)(e)&&this.resetBridgeForm()}onExternalAccountChange(){this.updateExternalBalance()}async created(){this.setStartSubscriptions([this.subscribeOnBlockUpdates,this.updateOutgoingMaxLimit,this.updateBridgeApps]),this.setResetSubscriptions([this.resetBlockUpdatesSubscription,this.resetOutgoingMaxLimitSubscription])}beforeDestroy(){this.disconnectExternalNetwork()}async updateBridgeApps(){await this.getSupportedApps(),this.restoreSelectedNetwork()}};(0,s.gn)([g.aD.web3.getSupportedApps],u.prototype,"getSupportedApps",void 0),(0,s.gn)([g.aD.web3.restoreSelectedNetwork],u.prototype,"restoreSelectedNetwork",void 0),(0,s.gn)([g.aD.bridge.updateExternalBalance],u.prototype,"updateExternalBalance",void 0),(0,s.gn)([g.aD.bridge.subscribeOnBlockUpdates],u.prototype,"subscribeOnBlockUpdates",void 0),(0,s.gn)([g.aD.bridge.updateOutgoingMaxLimit],u.prototype,"updateOutgoingMaxLimit",void 0),(0,s.gn)([g.aD.bridge.resetBridgeForm],u.prototype,"resetBridgeForm",void 0),(0,s.gn)([g.QF.bridge.resetBlockUpdatesSubscription],u.prototype,"resetBlockUpdatesSubscription",void 0),(0,s.gn)([g.QF.bridge.resetOutgoingMaxLimitSubscription],u.prototype,"resetOutgoingMaxLimitSubscription",void 0),(0,s.gn)([g.Yn.web3.selectedNetwork],u.prototype,"selectedNetwork",void 0),(0,s.gn)([g.Yn.bridge.externalAccount],u.prototype,"externalAccount",void 0),(0,s.gn)([g.Yn.web3.subAccount],u.prototype,"subAccount",void 0),(0,s.gn)([g.SB.bridge.subBridgeConnector],u.prototype,"subBridgeConnector",void 0),(0,s.gn)([g.SB.bridge.isSignTxDialogVisible],u.prototype,"isSignTxDialogVisible",void 0),(0,s.gn)([g.QF.bridge.setSignTxDialogVisibility],u.prototype,"setSignTxDialogVisibility",void 0),(0,s.gn)([(0,d.RL)("selectedNetwork")],u.prototype,"onSelectedNetworkChange",null),(0,s.gn)([(0,d.RL)("soraAddress"),(0,d.RL)("externalAccount")],u.prototype,"onExternalAccountChange",null),u=(0,s.gn)([(0,d.wA)({components:{ConfirmDialog:r.wx.ConfirmDialog}})],u);var l=u,b=(0,i(1001).Z)(l,(function(){var t=this,e=t._self._c;t._self._setupProxy;return e("div",{staticClass:"bridge-container"},[e("router-view",t._g(t._b({},"router-view",{parentLoading:t.subscriptionsDataLoading,...t.$attrs},!1),t.$listeners)),e("confirm-dialog",{attrs:{"chain-api":t.chainApi,account:t.subAccount,visibility:t.isSignTxDialogVisible,"set-visibility":t.setSignTxDialogVisibility}})],1)}),[],!1,null,null,null).exports}}]);