/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BridgeWrapperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "adminCount"
      | "admins"
      | "bridgeContract"
      | "getBalance"
      | "getSidechainTokenAddress"
      | "getSidechainTokenId"
      | "receiveAndDistribute"
      | "receiveFromWalletAndDistribute"
      | "removeAdmin"
      | "sweep"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminUpdated"
      | "AssetsDistributed"
      | "AssetsReceived"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "bridgeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSidechainTokenAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSidechainTokenId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveAndDistribute",
    values: [BytesLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveFromWalletAndDistribute",
    values: [AddressLike, BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSidechainTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSidechainTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveAndDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveFromWalletAndDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
}

export namespace AdminUpdatedEvent {
  export type InputTuple = [admin: AddressLike, isAdded: boolean];
  export type OutputTuple = [admin: string, isAdded: boolean];
  export interface OutputObject {
    admin: string;
    isAdded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetsDistributedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    totalAmount: BigNumberish,
    recipients: AddressLike[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    tokenAddress: string,
    totalAmount: bigint,
    recipients: string[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    tokenAddress: string;
    totalAmount: bigint;
    recipients: string[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetsReceivedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    amount: BigNumberish,
    from: AddressLike
  ];
  export type OutputTuple = [
    tokenAddress: string,
    amount: bigint,
    from: string
  ];
  export interface OutputObject {
    tokenAddress: string;
    amount: bigint;
    from: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BridgeWrapper extends BaseContract {
  connect(runner?: ContractRunner | null): BridgeWrapper;
  waitForDeployment(): Promise<this>;

  interface: BridgeWrapperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  adminCount: TypedContractMethod<[], [bigint], "view">;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  bridgeContract: TypedContractMethod<[], [string], "view">;

  getBalance: TypedContractMethod<
    [tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getSidechainTokenAddress: TypedContractMethod<
    [sidechainId: BytesLike],
    [string],
    "view"
  >;

  getSidechainTokenId: TypedContractMethod<
    [tokenAddress: AddressLike],
    [string],
    "view"
  >;

  receiveAndDistribute: TypedContractMethod<
    [
      encodedData: BytesLike,
      recipients: AddressLike[],
      amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  receiveFromWalletAndDistribute: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      amount: BigNumberish,
      recipients: AddressLike[],
      amounts: BigNumberish[]
    ],
    [void],
    "payable"
  >;

  removeAdmin: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  sweep: TypedContractMethod<
    [tokenAddress: AddressLike, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "adminCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bridgeContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSidechainTokenAddress"
  ): TypedContractMethod<[sidechainId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSidechainTokenId"
  ): TypedContractMethod<[tokenAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "receiveAndDistribute"
  ): TypedContractMethod<
    [
      encodedData: BytesLike,
      recipients: AddressLike[],
      amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveFromWalletAndDistribute"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      amount: BigNumberish,
      recipients: AddressLike[],
      amounts: BigNumberish[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sweep"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminUpdated"
  ): TypedContractEvent<
    AdminUpdatedEvent.InputTuple,
    AdminUpdatedEvent.OutputTuple,
    AdminUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AssetsDistributed"
  ): TypedContractEvent<
    AssetsDistributedEvent.InputTuple,
    AssetsDistributedEvent.OutputTuple,
    AssetsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "AssetsReceived"
  ): TypedContractEvent<
    AssetsReceivedEvent.InputTuple,
    AssetsReceivedEvent.OutputTuple,
    AssetsReceivedEvent.OutputObject
  >;

  filters: {
    "AdminUpdated(address,bool)": TypedContractEvent<
      AdminUpdatedEvent.InputTuple,
      AdminUpdatedEvent.OutputTuple,
      AdminUpdatedEvent.OutputObject
    >;
    AdminUpdated: TypedContractEvent<
      AdminUpdatedEvent.InputTuple,
      AdminUpdatedEvent.OutputTuple,
      AdminUpdatedEvent.OutputObject
    >;

    "AssetsDistributed(address,uint256,address[],uint256[])": TypedContractEvent<
      AssetsDistributedEvent.InputTuple,
      AssetsDistributedEvent.OutputTuple,
      AssetsDistributedEvent.OutputObject
    >;
    AssetsDistributed: TypedContractEvent<
      AssetsDistributedEvent.InputTuple,
      AssetsDistributedEvent.OutputTuple,
      AssetsDistributedEvent.OutputObject
    >;

    "AssetsReceived(address,uint256,address)": TypedContractEvent<
      AssetsReceivedEvent.InputTuple,
      AssetsReceivedEvent.OutputTuple,
      AssetsReceivedEvent.OutputObject
    >;
    AssetsReceived: TypedContractEvent<
      AssetsReceivedEvent.InputTuple,
      AssetsReceivedEvent.OutputTuple,
      AssetsReceivedEvent.OutputObject
    >;
  };
}
