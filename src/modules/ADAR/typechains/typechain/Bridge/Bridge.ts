/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_addressVAL"
      | "_addressXOR"
      | "_networkId"
      | "_sidechainTokenAddressArray"
      | "_sidechainTokens"
      | "_sidechainTokensByAddress"
      | "_uniqueAddresses"
      | "acceptedEthTokens"
      | "addEthNativeToken"
      | "addNewSidechainToken"
      | "addPeerByPeer"
      | "isPeer"
      | "peersCount"
      | "prepareForMigration"
      | "receiveByEthereumAssetAddress"
      | "receiveBySidechainAssetId"
      | "receivePayment"
      | "removePeerByPeer"
      | "sendERC20ToSidechain"
      | "sendEthToSidechain"
      | "shutDownAndMigrate"
      | "used"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangePeers"
      | "Deposit"
      | "Migrated"
      | "PreparedForMigration"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_addressVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_addressXOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_networkId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_sidechainTokenAddressArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_sidechainTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_sidechainTokensByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_uniqueAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedEthTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addEthNativeToken",
    values: [
      AddressLike,
      string,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addNewSidechainToken",
    values: [
      string,
      string,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPeerByPeer",
    values: [AddressLike, BytesLike, BigNumberish[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "isPeer", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "peersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prepareForMigration",
    values: [BytesLike, BigNumberish[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveByEthereumAssetAddress",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveBySidechainAssetId",
    values: [
      BytesLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receivePayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePeerByPeer",
    values: [AddressLike, BytesLike, BigNumberish[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC20ToSidechain",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendEthToSidechain",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shutDownAndMigrate",
    values: [
      BytesLike,
      AddressLike,
      AddressLike[],
      BigNumberish[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "used", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "_addressVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_addressXOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_networkId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_sidechainTokenAddressArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_sidechainTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_sidechainTokensByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_uniqueAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedEthTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEthNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNewSidechainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPeerByPeer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peersCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareForMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveByEthereumAssetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveBySidechainAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePeerByPeer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC20ToSidechain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendEthToSidechain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shutDownAndMigrate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "used", data: BytesLike): Result;
}

export namespace ChangePeersEvent {
  export type InputTuple = [peerId: AddressLike, removal: boolean];
  export type OutputTuple = [peerId: string, removal: boolean];
  export interface OutputObject {
    peerId: string;
    removal: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    destination: BytesLike,
    amount: BigNumberish,
    token: AddressLike,
    sidechainAsset: BytesLike
  ];
  export type OutputTuple = [
    destination: string,
    amount: bigint,
    token: string,
    sidechainAsset: string
  ];
  export interface OutputObject {
    destination: string;
    amount: bigint;
    token: string;
    sidechainAsset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MigratedEvent {
  export type InputTuple = [to: AddressLike];
  export type OutputTuple = [to: string];
  export interface OutputObject {
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PreparedForMigrationEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [txHash: BytesLike];
  export type OutputTuple = [txHash: string];
  export interface OutputObject {
    txHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Bridge extends BaseContract {
  connect(runner?: ContractRunner | null): Bridge;
  waitForDeployment(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _addressVAL: TypedContractMethod<[], [string], "view">;

  _addressXOR: TypedContractMethod<[], [string], "view">;

  _networkId: TypedContractMethod<[], [string], "view">;

  _sidechainTokenAddressArray: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  _sidechainTokens: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  _sidechainTokensByAddress: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  _uniqueAddresses: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  acceptedEthTokens: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  addEthNativeToken: TypedContractMethod<
    [
      newToken: AddressLike,
      ticker: string,
      name: string,
      decimals: BigNumberish,
      txHash: BytesLike,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  addNewSidechainToken: TypedContractMethod<
    [
      name: string,
      symbol: string,
      decimals: BigNumberish,
      sidechainAssetId: BytesLike,
      txHash: BytesLike,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  addPeerByPeer: TypedContractMethod<
    [
      newPeerAddress: AddressLike,
      txHash: BytesLike,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;

  isPeer: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  peersCount: TypedContractMethod<[], [bigint], "view">;

  prepareForMigration: TypedContractMethod<
    [salt: BytesLike, v: BigNumberish[], r: BytesLike[], s: BytesLike[]],
    [void],
    "nonpayable"
  >;

  receiveByEthereumAssetAddress: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      amount: BigNumberish,
      to: AddressLike,
      from: AddressLike,
      txHash: BytesLike,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  receiveBySidechainAssetId: TypedContractMethod<
    [
      sidechainAssetId: BytesLike,
      amount: BigNumberish,
      to: AddressLike,
      from: AddressLike,
      txHash: BytesLike,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  receivePayment: TypedContractMethod<[], [void], "payable">;

  removePeerByPeer: TypedContractMethod<
    [
      peerAddress: AddressLike,
      txHash: BytesLike,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;

  sendERC20ToSidechain: TypedContractMethod<
    [to: BytesLike, amount: BigNumberish, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  sendEthToSidechain: TypedContractMethod<[to: BytesLike], [void], "payable">;

  shutDownAndMigrate: TypedContractMethod<
    [
      salt: BytesLike,
      newContractAddress: AddressLike,
      erc20nativeTokens: AddressLike[],
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  used: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_addressVAL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_addressXOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_networkId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_sidechainTokenAddressArray"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "_sidechainTokens"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "_sidechainTokensByAddress"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "_uniqueAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "acceptedEthTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "addEthNativeToken"
  ): TypedContractMethod<
    [
      newToken: AddressLike,
      ticker: string,
      name: string,
      decimals: BigNumberish,
      txHash: BytesLike,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addNewSidechainToken"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      decimals: BigNumberish,
      sidechainAssetId: BytesLike,
      txHash: BytesLike,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addPeerByPeer"
  ): TypedContractMethod<
    [
      newPeerAddress: AddressLike,
      txHash: BytesLike,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPeer"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "peersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "prepareForMigration"
  ): TypedContractMethod<
    [salt: BytesLike, v: BigNumberish[], r: BytesLike[], s: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveByEthereumAssetAddress"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      amount: BigNumberish,
      to: AddressLike,
      from: AddressLike,
      txHash: BytesLike,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveBySidechainAssetId"
  ): TypedContractMethod<
    [
      sidechainAssetId: BytesLike,
      amount: BigNumberish,
      to: AddressLike,
      from: AddressLike,
      txHash: BytesLike,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receivePayment"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "removePeerByPeer"
  ): TypedContractMethod<
    [
      peerAddress: AddressLike,
      txHash: BytesLike,
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendERC20ToSidechain"
  ): TypedContractMethod<
    [to: BytesLike, amount: BigNumberish, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendEthToSidechain"
  ): TypedContractMethod<[to: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "shutDownAndMigrate"
  ): TypedContractMethod<
    [
      salt: BytesLike,
      newContractAddress: AddressLike,
      erc20nativeTokens: AddressLike[],
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "used"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getEvent(
    key: "ChangePeers"
  ): TypedContractEvent<
    ChangePeersEvent.InputTuple,
    ChangePeersEvent.OutputTuple,
    ChangePeersEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Migrated"
  ): TypedContractEvent<
    MigratedEvent.InputTuple,
    MigratedEvent.OutputTuple,
    MigratedEvent.OutputObject
  >;
  getEvent(
    key: "PreparedForMigration"
  ): TypedContractEvent<
    PreparedForMigrationEvent.InputTuple,
    PreparedForMigrationEvent.OutputTuple,
    PreparedForMigrationEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "ChangePeers(address,bool)": TypedContractEvent<
      ChangePeersEvent.InputTuple,
      ChangePeersEvent.OutputTuple,
      ChangePeersEvent.OutputObject
    >;
    ChangePeers: TypedContractEvent<
      ChangePeersEvent.InputTuple,
      ChangePeersEvent.OutputTuple,
      ChangePeersEvent.OutputObject
    >;

    "Deposit(bytes32,uint256,address,bytes32)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Migrated(address)": TypedContractEvent<
      MigratedEvent.InputTuple,
      MigratedEvent.OutputTuple,
      MigratedEvent.OutputObject
    >;
    Migrated: TypedContractEvent<
      MigratedEvent.InputTuple,
      MigratedEvent.OutputTuple,
      MigratedEvent.OutputObject
    >;

    "PreparedForMigration()": TypedContractEvent<
      PreparedForMigrationEvent.InputTuple,
      PreparedForMigrationEvent.OutputTuple,
      PreparedForMigrationEvent.OutputObject
    >;
    PreparedForMigration: TypedContractEvent<
      PreparedForMigrationEvent.InputTuple,
      PreparedForMigrationEvent.OutputTuple,
      PreparedForMigrationEvent.OutputObject
    >;

    "Withdrawal(bytes32)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
